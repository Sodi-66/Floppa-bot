import utils
import sqlite3
import json
import config
import random
import time

from datetime import datetime, timedelta
from config import bot, wait_time, sleeping
from telebot import types


def start_message(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã', callback_data='buyflopp'))

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –®–ª—ë–ø–∞ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üëãüòº *–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cmd* –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å '
                                      '–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∞ –∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å–≤–æ–∏–º –®–ª—ë–ø–æ–π!üìÑ\n–ü–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ '
                                      '—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –®–ª—ë–ø–æ–πüòª: –∫–æ—Ä–º–∏—Ç–µ –µ–≥–æ, —É—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –Ω–∏–º –∏ –∫–æ–Ω–µ—á–Ω–æ –∏–≥—Ä–∞–π—Ç–µ—Å—å —Å –Ω–∏–º, '
                                      '*–∏–Ω–∞—á–µ –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –µ–≥–æ –ø–æ—Ç–µ—Ä—è—Ç—å*üòø', reply_markup=markup, parse_mode='Markdown')

    with open ('floppa-caracal.gif', 'rb') as animation_small_floppa:
        bot.send_animation(message.chat.id, animation_small_floppa)


def cmd_help(message):
    bot.send_message(message.chat.id, '<b>–°–ü–ò–°–û–ö –í–°–ï–• –ö–û–ú–ê–ù–îüìã:</b>\n\n/buy - –∫—É–ø–∏—Ç—å –®–ª—ë–ø—Éüòº\n/feed - –ü–æ–∫–æ—Ä–º–∏—Ç—å –®–ª—ë–ø—Éü•ü\n'
                                      '/clean - –í—ã–º—ã—Ç—å –®–ª—ë–ø—ÉüõÅ\n/play - –ü–æ–∏–≥—Ä–∞—Ç—å —Å–æ –®–ª—ë–ø–æ–πüß∏\n/myfloppa - –£–∑–Ω–∞—Ç—å –æ '
                                      '–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–∞—Ä–∞–∫–∞–ª–∞üêà\n\n/work - —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω—ãüí∞'
                                      '\n/shop - –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ωüè™\n/buy_item [–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ] - –∫—É–ø–∏—Ç—å –ø—Ä–µ'
                                      '–¥–º–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µüõí\n/inventory - –æ—Ç–∫—Ä—ã—Ç—å —Ä—é–∫–∑–∞–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏üéí\n/use_item [–Ω–æ–º–µ—Ä '
                                      '–ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ä—é–∫–∑–∞–∫–∞üì¶'
                                      '\n/sleep - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –®–ª—ë–ø—É —Å–ø–∞—Ç—å üò¥\n/unsleep - —Ä–∞–∑—É–±–¥–∏—Ç—å –®–ª—ë–ø—É üõè'
                                      '\n/caz /cas - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ üé∞',
                     parse_mode='html')


def shop(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:

        cursor.execute('SELECT waste FROM users WHERE user_id = ?', (user_id,))
        enough_clean = cursor.fetchone()

        if enough_clean[0] < 20:
            bot.send_message(chat_id, '–í–∞—à–µ–≥–æ –®–ª—ë–ø—É –≤—ã—à–≤—ã—Ä–Ω—É–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!üòø *–ü–æ–º–æ–π—Ç–µ –µ–≥–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –≥—Ä—è–∑–Ω—ã–π.üòæ*'
                                      '\n\n*/clean - –ø–æ–º—ã—Ç—å*', parse_mode='Markdown')
            return

        conn_1 = sqlite3.connect('shop-items.db')
        cursor_1 = conn_1.cursor()

        cursor_1.execute('SELECT id, name, price FROM items')
        items = cursor_1.fetchall()

        shop_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µüõç:\n"
        for item_id, name, price in items:
            shop_message += f"{item_id}. {name} - {price} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤üí∞\n"

        bot.send_message(chat_id, shop_message)

        conn_1.close()

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    conn.close()


def buy_item(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        item_id = int(message.text.split()[1])
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã‚úÖ: */buy_item [–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞]*",
                         parse_mode='Markdown')
        return

    conn_1 = sqlite3.connect('users-floppa.sql')
    cursor_1 = conn_1.cursor()

    cursor_1.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor_1.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor_1.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor_1.fetchone()

    if existing_user:

        cursor_1.execute('SELECT waste FROM users WHERE user_id = ?', (user_id,))
        enough_clean = cursor_1.fetchone()

        if enough_clean[0] < 20:
            bot.send_message(chat_id, '–í–∞—à–µ–≥–æ –®–ª—ë–ø—É –≤—ã—à–≤—ã—Ä–Ω—É–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!üòø *–ü–æ–º–æ–π—Ç–µ –µ–≥–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –≥—Ä—è–∑–Ω—ã–π.üòæ*'
                                      '\n\n*/clean - –ø–æ–º—ã—Ç—å*', parse_mode='Markdown')
            return

        conn = sqlite3.connect('shop-items.db')
        cursor = conn.cursor()

        cursor.execute('SELECT name, price, effect FROM items WHERE id = ?', (item_id,))
        item = cursor.fetchone()

        if item:

            username = message.from_user.username

            cursor_1.execute('SELECT coin FROM users WHERE user_id = ?', (user_id,))
            user_coin = cursor_1.fetchone()[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            cursor_1.execute('SELECT item_name FROM inventory WHERE user_id = ? AND item_name = ?', (user_id, item[0]))
            existing_item = cursor_1.fetchone()

            if user_coin >= item[1] and not existing_item:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor_1.execute('UPDATE users SET coin = coin - ? WHERE user_id = ?', (item[1], user_id))
                conn_1.commit()

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor_1.execute('INSERT INTO inventory (user_id, item_name, effect) VALUES (?, ?, ?)',
                                 (user_id, item[0], item[2]))
                conn_1.commit()

                bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {username}! *–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {item[0]}* –∑–∞ {item[1]} "
                                                  f"—Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤.üí∞", parse_mode='Markdown')
            elif existing_item:
                bot.send_message(chat_id, f"*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {item[0]}* –≤ —Ä—é–∫–∑–∞–∫–µ.\n/inv - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä—é–∫–∑–∞–∫.üéí",
                                 parse_mode='Markdown')
            else:
                bot.send_message(chat_id, f"*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤* –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item[0]}.üõí\n"
                                                  f"–°—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –±–æ–≥–∞—á–µ (/work).\n/myfloppa - "
                                                  f"*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–∏–Ω–æ–≤.*üí∞",
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, "*–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.*üòæ", parse_mode='Markdown')

        conn.close()

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.", parse_mode='Markdown')

    conn_1.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def use_item(message):
    try:
        item_id = int(message.text.split()[1])
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã‚úÖ: */use_item [–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞]*",
                         parse_mode='Markdown')
        return

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    user_id = message.from_user.id
    chat_id = message.chat.id

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        cursor.execute('SELECT item_name, effect FROM inventory WHERE user_id = ?', (user_id,))
        inventory_items = cursor.fetchall()

        if item_id <= 0 or item_id > len(inventory_items):
            bot.send_message(chat_id, "*–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–±–æ –≤–∞—à —Ä—é–∫–∑–∞–∫ –ø—É—Å—Ç.* ‚ùå",
                             parse_mode='Markdown')
            return

        item_name, item_effect = inventory_items[item_id - 1]

        effect = json.loads(item_effect)

        if item_name == '–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞':
            bot.send_message(chat_id, '‚ùå–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞ - —ç—Ç–æ –ø–∞—Å—Å–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. –ë–ª–∞–≥–æ–¥–∞—Ä—è –µ–π –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å'
                                      ' –±–æ–ª—å—à–µ —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç–µ.')
            return

        if "hunger" in effect:
            cursor.execute('UPDATE users SET hunger = ? WHERE user_id = ?', (effect["hunger"], user_id))
        if "waste" in effect:
            cursor.execute('UPDATE users SET waste = ? WHERE user_id = ?', (effect["waste"], user_id))
        if "boredom" in effect:
            cursor.execute('UPDATE users SET boredom = ? WHERE user_id = ?', (effect["boredom"], user_id))

        if 'coin_range' in effect:
            coin_range = effect['coin_range']
            random_coin = random.randint(coin_range[0], coin_range[1])
            cursor.execute('UPDATE users SET coin = coin + ? WHERE user_id = ?',
                           (random_coin, user_id))

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if item_name != '–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞':
            cursor.execute('DELETE FROM inventory WHERE user_id = ? AND item_name = ?', (user_id, item_name))
            conn.commit()

        bot.send_message(chat_id, f"*–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {item_name}. ‚úÖ*", parse_mode='Markdown')
        if 'coin_range' in effect:
            bot.send_message(chat_id, f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ {random_coin} –º–æ–Ω–µ—Ç.\n/myfloppa - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª—ë–∫')

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.", parse_mode='Markdown')

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sleep
def sleep_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ 240 —Å–µ–∫—É–Ω–¥ (4 –º–∏–Ω—É—Ç—ã)
        cursor.execute('UPDATE users SET wait_interval = 240, sleeping = 1 WHERE user_id = ?', (user_id,))
        conn.commit()

        bot.send_message(chat_id, "*–®–ª—ë–ø–∞ –∑–∞—Å—ã–ø–∞–µ—Çüòºüí§.*\n\n–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥, –∞ –Ω—É–∂–¥—ã –±—É–¥—É—Ç "
                                  "—É–º–µ–Ω—å—à–µ–Ω—ã.", parse_mode='Markdown')

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.", parse_mode='Markdown')

    conn.close()


def unsleep_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞) –∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å–Ω–∞
        cursor.execute('UPDATE users SET wait_interval = 60, sleeping = 0 WHERE user_id = ?', (user_id,))
        conn.commit()

        bot.send_message(chat_id, "*–®–ª—ë–ø–∞ –ø—Ä–æ—Å–Ω—É–ª—Å—è.*üòºü•± –¢—â–∞—Ç–µ–ª—å–Ω–æ —É—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –∫–æ—Ç–æ–º. ", parse_mode='Markdown')

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.", parse_mode='Markdown')
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def inventory(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        cursor.execute('SELECT item_name, effect FROM inventory WHERE user_id = ?', (user_id,))
        inventory_items = cursor.fetchall()

        inventory_message = "–í–∞—à —Ä—é–∫–∑–∞–∫üéí:\n"
        for item_name, effect_json in inventory_items:
            effect = json.loads(effect_json)
            inventory_message += f"{item_name}\n"

        bot.send_message(message.chat.id, inventory_message)

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    conn.close()


def my_floppa_info(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT username, floppa_name, coin, age, hunger, waste, boredom FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result:
        username, floppa_name, coin, age, hunger, waste, boredom = result

        if user_id in config.last_feed_times:
            time_since_last_feed = datetime.now() - config.last_feed_times[user_id]
            time_until_next_feed = timedelta(minutes=40) - time_since_last_feed
        else:
            time_until_next_feed = timedelta(minutes=0)

        if user_id in config.last_clean_times:
            time_since_last_clean = datetime.now() - config.last_clean_times[user_id]
            time_until_next_clean = timedelta(hours=1) - time_since_last_clean
        else:
            time_until_next_clean = timedelta(hours=0)

        if user_id in config.last_play_times:
            time_since_last_play = datetime.now() - config.last_play_times[user_id]
            time_until_next_play = timedelta(minutes=30) - time_since_last_play
        else:
            time_until_next_play = timedelta(minutes=0)

        if user_id in config.last_work_time:
            time_since_last_work = datetime.now() - config.last_work_time[user_id]
            time_until_next_work = timedelta(seconds=3600) - time_since_last_work
        else:
            time_until_next_work = timedelta(seconds=0)

        minutes_feed, seconds_feed = divmod(time_until_next_feed.seconds, 60)
        time_until_next_feed_str = f"{minutes_feed} –º–∏–Ω—É—Ç.üïû"

        minutes_clean, seconds_clean = divmod(time_until_next_clean.seconds, 60)
        time_until_next_clean_str = f"{minutes_clean} –º–∏–Ω—É—Ç.üïò"

        minutes_play, seconds_play = divmod(time_until_next_play.seconds, 60)
        time_until_next_play_str = f"{minutes_play} –º–∏–Ω—É—Ç.üïî"

        hours_work, remainder_work = divmod(time_until_next_work.seconds, 3600)
        minutes_work, seconds_work = divmod(remainder_work, 60)
        time_until_next_work_str = f"{minutes_work} –º–∏–Ω—É—Ç.üïú"

        info_message = (
            f"–ò–º—è —Ö–æ–∑—è–∏–Ω–∞üë®üèªüßë: {username}\n"
            f"–ò–º—è –®–ª—ë–ø—ãüòº: {floppa_name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç –®–ª—ë–ø—ãü•≥: {age} –¥–µ–Ω—å\n"
            f"–§–ª–æ–ø–ø–æ-–∫–æ–∏–Ω—ãüí∞: {coin}\n\n"
            f"–°—ã—Ç–æ—Å—Ç—åüòã: {hunger}%\n"
            f"–ß–∏—Å—Ç–æ—Ç–∞üßº: {waste}%\n"
            f"–í–µ—Å—ë–ª—ã–πüò∏: {boredom}%\n\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ü•ü: {time_until_next_feed_str}\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —É–±–æ—Ä–∫–∞ —á–µ—Ä–µ–∑üßπ: {time_until_next_clean_str}\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑üß∏: {time_until_next_play_str}\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞ —á–µ—Ä–µ–∑üë∑üèº: {time_until_next_work_str}\n"
        )
    else:
        info_message = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –®–ª—ë–ø—É.üòø\n–ö—É–ø–∏—Ç–µ –®–ª—ë–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /buy"

    bot.send_message(chat_id, info_message)
    with open('self.gif', 'rb') as gif_my_floppa:
        bot.send_animation(message.chat.id, gif_my_floppa)

    conn.close()


def feed_floppa(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        if user_id in config.last_feed_times and datetime.now() - config.last_feed_times[user_id] < timedelta(minutes=40):
            bot.send_message(chat_id, '–í—ã –Ω–µ–¥–∞–≤–Ω–æ –∫–æ—Ä–º–∏–ª–∏ –®–ª—ë–ø—É. üòã *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*', parse_mode='Markdown')
        else:
            conn = sqlite3.connect('users-floppa.sql')
            cursor = conn.cursor()

            cursor.execute('SELECT hunger FROM users WHERE user_id = ?', (user_id,))
            current_hunger = cursor.fetchone()[0]
            new_hunger = min(current_hunger + 50, 100)

            cursor.execute('UPDATE users SET hunger = ? WHERE user_id = ?', (new_hunger, user_id))
            conn.commit()

            config.last_feed_times[user_id] = datetime.now()

            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ –Ω–∞–µ–ª—Å—è!üòã *–°—ã—Ç–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å {new_hunger}%.*', parse_mode='Markdown')

            conn.close()

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')


def clean_floppa(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:

        cursor.execute('SELECT boredom FROM users WHERE user_id = ?', (user_id,))
        enough_boredom = cursor.fetchone()

        if enough_boredom[0] < 20:
            bot.send_message(chat_id, f'*–í–∞–º —Å—Ç–æ–∏—Ç –ø–æ–∏–≥—Ä–∞—Ç—å —Å –∫–æ—Ç–æ–ºüß∏*, –®–ª—ë–ø–∞ –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è –≤–∞—Å –∏ –Ω–µ —Ö–æ—á–µ—Ç –º—ã—Ç—å—Å—è.üòæ'
                                      f'\n\n*/play - –ø–æ–∏–≥—Ä–∞—Ç—å*', parse_mode='Markdown')
            return

        if user_id in config.last_clean_times and datetime.now() - config.last_clean_times[user_id] < timedelta(hours=1):
            bot.send_message(chat_id, '–í—ã –Ω–µ–¥–∞–≤–Ω–æ –º—ã–ª–∏ –®–ª—ë–ø—É.üòºüßº *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*\n/myfloppa - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è',
                             parse_mode='Markdown')
        else:
            conn = sqlite3.connect('users-floppa.sql')
            cursor = conn.cursor()

            cursor.execute('UPDATE users SET waste = 100 WHERE user_id = ?', (user_id,))
            conn.commit()

            config.last_clean_times[user_id] = datetime.now()

            bot.send_message(chat_id, '*–®–ª—ë–ø–∞ —Ç–µ–ø–µ—Ä—å —á–∏—Å—Ç—ã–π!*üòº', parse_mode='Markdown')

            conn.close()
    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')


def play_with_floppa(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:

        cursor.execute('SELECT hunger FROM users WHERE user_id = ?', (user_id,))
        hunger_count = cursor.fetchone()

        if hunger_count[0] < 20:
            bot.send_message(chat_id, f'*–í–∞–º —Å—Ç–æ–∏—Ç –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞ü•©*, –®–ª—ë–ø–∞ –Ω–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–æ–ª–æ–¥–Ω—ã–π –∂–µ–ª—É–¥–æ–∫.üòæ'
                                      f'\n{hunger_count}% —Å—ã—Ç–æ—Å—Ç–∏\n\n*/feed - –ø–æ–∫–æ—Ä–º–∏—Ç—å*', parse_mode='Markdown')
            return

        if user_id in config.last_play_times and datetime.now() - config.last_play_times[user_id] < timedelta(minutes=30):
            bot.send_message(chat_id, '–í—ã –Ω–µ–¥–∞–≤–Ω–æ –∏–≥—Ä–∞–ª–∏ —Å–æ –®–ª—ë–ø–æ–π. üòºüß∏ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*\n/myfloppa - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è',
                             parse_mode='Markdown')
        else:
            conn = sqlite3.connect('users-floppa.sql')
            cursor = conn.cursor()

            cursor.execute('SELECT boredom FROM users WHERE user_id = ?', (user_id,))
            current_boredom = cursor.fetchone()[0]
            new_boredom = min(current_boredom + 40, 100)

            cursor.execute('UPDATE users SET boredom = ? WHERE user_id = ?', (new_boredom, user_id))
            conn.commit()

            config.last_play_times[user_id] = datetime.now()

            bot.send_message(chat_id, '–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –®–ª—ë–ø–æ–π! *–¢–µ–ø–µ—Ä—å –æ–Ω –≤–µ—Å–µ–ª–µ–µ.*üò∏', parse_mode='Markdown')

            conn.close()

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')


def work_floppa(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')
        return

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:

        work_markup = types.InlineKeyboardMarkup()
        cement_button = types.InlineKeyboardButton(text='–¶–µ–º–µ–Ω—Ç–Ω—ã–π –∑–∞–≤–æ–¥ üóø', callback_data='work_cement')
        dumpling_button = types.InlineKeyboardButton(text='–ü–µ–ª—å–º–µ–Ω–Ω–∞—è ü•ü', callback_data='work_dumpling')
        farm_button = types.InlineKeyboardButton(text='–ú—è—Ç–Ω–∞—è –ø–ª–∞–Ω—Ç–∞—Ü–∏—è üåø', callback_data='button_farm')
        work_markup.add(cement_button, dumpling_button)
        work_markup.add(farm_button)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–π–¥—ë—Ç–µ.', reply_markup=work_markup)

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')


def set_age(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä age –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('UPDATE users SET age = ? WHERE user_id = ?', (5, user_id))
        conn.commit()

        bot.send_message(chat_id, '–í–∞—à–µ–º—É –®–ª—ë–ø–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç 5 –ª–µ—Ç! üéÇ')
    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    conn.close()


def create_cas_base(message):
    conn = sqlite3.connect('casino.sql')
    cursor = conn.cursor()

    cursor.execute('CREATE TABLE IF NOT EXISTS casino(id INTEGER PRIMARY KEY, user_id INTEGER, username TEXT, '
                   'chips INTEGER, wins INTEGER, losses INTEGER)')

    conn.commit()
    conn.close()

    bot.reply_to(message, '–í—ã —Å–æ–∑–¥–∞–ª–∏ –±–∞–∑—É –∫—É–∑–±–∞—Å–∞!')


def start_casino(message):
    user_id = message.from_user.id

    if user_id in config.last_casino_time:
        last_usage_time = config.last_casino_time[user_id]
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        if current_time - last_usage_time < 365:
            wait_time = int(365 - (current_time - last_usage_time))
            bot.reply_to(message, f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã. üòº‚è≥")
            return

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É
    chat_id = message.chat.id

    conn = sqlite3.connect('casino.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM casino WHERE user_id=?', (user_id,))
    user_data = cursor.fetchone()

    conn_base = sqlite3.connect('users-floppa.sql')
    cursor_base = conn_base.cursor()

    cursor_base.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor_base.fetchone()

    if existing_user:

        if existing_user[9] == 1:
            bot.send_message(chat_id,
                             '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                             parse_mode='Markdown')
            return
        if existing_user[8] < 20:
            bot.send_message(chat_id, f'*–®–ª—ë–ø–∞ –≤ —Ç–∏–ª—å—Ç–µ! üòø*, –®–ª—ë–ø–∞ –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ —Å–µ–π—á–∞—Å..'
                                      f'\n\n*/play - –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –®–ª—ë–ø—É.*', parse_mode='Markdown')
            return

        if user_data is None:
            username = message.from_user.username if message.from_user.username else message.from_user.first_name
            cursor.execute('INSERT INTO casino(user_id, username, chips, wins, losses) VALUES(?, ?, 0, 0, 0)',
                           (user_id, username))
            conn.commit()
            bot.reply_to(message,
                         f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, {username}üßê!\n\n(–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å)')

        else:
            keyboard = types.InlineKeyboardMarkup()
            casino_button_1 = types.InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å üé∞', callback_data='play_caz')
            casino_button_2 = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìã', callback_data='my_chips')
            casino_button_3 = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å —Ñ–∏—à–∫–∏ üí∞', callback_data='buy_chips')
            casino_button_4 = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–∞—Ç—å —Ñ–∏—à–∫–∏ üí≤', callback_data='sell_chips')
            keyboard.add(casino_button_1, casino_button_2)
            keyboard.add(casino_button_3, casino_button_4)

            with open('casino_floppa.jpg', 'rb') as casino_photo:
                bot.send_photo(chat_id, casino_photo)

            bot.send_message(chat_id, '*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –∫–∞–∑–∏–Ω–æüßê!* ', parse_mode='Markdown', reply_markup=keyboard)

    else:
        bot.send_message(chat_id,
                         "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n–í–≤–µ–¥–∏—Ç–µ "
                         "–∫–æ–º–∞–Ω–¥—É /buy.", parse_mode='Markdown')

    # –û–±–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    config.last_casino_time[user_id] = time.time()

    conn_base.close()
    conn.close()
