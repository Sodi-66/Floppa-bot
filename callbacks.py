import sqlite3
import config
import utils
import random

from config import bot
from commmands import cmd_help
from telebot import types
from config import nice_clients, strict_clients, not_strict_clients, farm_problems
from datetime import timedelta, datetime
from utils import work_result_dumplings as salary

current_client = None
current_farm_problem = None


@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):

    global current_client
    global current_farm_problem

    if call.data == 'play_caz':

        chat_id = call.message.chat.id

        casino_keyboard = types.InlineKeyboardMarkup()
        zero_button = types.InlineKeyboardButton(text='0Ô∏è‚É£ [36:1]', callback_data='zero')
        red_button = types.InlineKeyboardButton(text='üü•', callback_data='red')
        black_button = types.InlineKeyboardButton(text='‚¨õÔ∏è', callback_data='black')
        even_button = types.InlineKeyboardButton(text='–ß—ë—Ç–Ω–æ–µ', callback_data='even')
        odd_button = types.InlineKeyboardButton(text='–ù–µ—á—ë—Ç–Ω–æ–µ', callback_data='odd')
        st_button = types.InlineKeyboardButton(text='1Ô∏è‚É£st 12', callback_data='st')
        nd_button = types.InlineKeyboardButton(text='2Ô∏è‚É£nd 12', callback_data='nd')
        rd_button = types.InlineKeyboardButton(text='3Ô∏è‚É£rd 12', callback_data='rd')
        _34_button = types.InlineKeyboardButton(text='1Ô∏è‚É£ —Ä—è–¥', callback_data='34')
        _35_button = types.InlineKeyboardButton(text='2Ô∏è‚É£ —Ä—è–¥', callback_data='35')
        _36_button = types.InlineKeyboardButton(text='3Ô∏è‚É£ —Ä—è–¥', callback_data='36')
        _1_to_18_button = types.InlineKeyboardButton(text='1Ô∏è‚É£-1Ô∏è‚É£8Ô∏è‚É£', callback_data='1-18')
        _19_to_36_button = types.InlineKeyboardButton(text='1Ô∏è‚É£9Ô∏è‚É£-3Ô∏è‚É£6Ô∏è‚É£', callback_data='19-36')
        casino_keyboard.add(zero_button, )
        casino_keyboard.add(red_button, black_button)
        casino_keyboard.add(even_button, odd_button)
        casino_keyboard.add(_1_to_18_button, _19_to_36_button)
        casino_keyboard.add(st_button, nd_button, rd_button)
        casino_keyboard.add(_34_button, _35_button, _36_button)

        bot.send_message(chat_id, '*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å ü§î*', parse_mode='Markdown',
                         reply_markup=casino_keyboard)

    if call.data == 'my_chips':

        user_id = call.from_user.id
        conn = sqlite3.connect('casino.sql')
        cursor = conn.cursor()

        cursor.execute('SELECT username, chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
        user_data = cursor.fetchone()

        if user_data is not None:
            username, chips, wins, losses = user_data
            response = f'{username}üßê:\n\n–ë–∞–ª–∞–Ω—Å —Ñ–∏—à–µ–∫ üé∞: {chips}\n–ü–æ–±–µ–¥—ã –≤ –∏–≥—Ä–∞—Ö ü•á: {wins}\n–ü–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–∞—Ö üòü: {losses}'
        else:
            response = '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –≤–∞—Å –Ω–µ –¥–æ–≤–µ—Ä—è–µ–º! (–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!)'

        bot.send_message(call.message.chat.id, response)
        conn.close()

    if call.data == 'buyflopp':
        cmd_help(call.message)

    if call.data == 'work_cement':
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        conn = sqlite3.connect('users-floppa.sql')
        cursor = conn.cursor()

        cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
        sleep_check = cursor.fetchone()

        if sleep_check[0] == 1:
            bot.send_message(chat_id,
                             '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                             parse_mode='Markdown')
            return

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:

            cursor.execute('SELECT coin, waste, hunger, boredom FROM users WHERE user_id = ?', (user_id,))
            current_values = cursor.fetchone()

            coin, waste, hunger, boredom = current_values

            if waste < 15 or hunger < 15 or boredom < 15:
                bot.send_message(chat_id, '*–®–ª—ë–ø–µ –Ω—É–∂–µ–Ω —É—Ö–æ–¥*, —Å–µ–π—á–∞—Å –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.üòæ\n\n/myfloppa',
                                 parse_mode='Markdown')
                return

            if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
                remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë '
                                          f'{minutes} –º–∏–Ω—É—Ç.*', parse_mode='Markdown')
            else:
                has_concrete_mixer = False

                cursor.execute('SELECT item_name FROM inventory WHERE user_id = ? AND item_name = ?',
                               (user_id, '–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞'))
                has_concrete_mixer = cursor.fetchone()

                if has_concrete_mixer:
                    earned_money = 60
                else:
                    earned_money = 30

                bot.send_message(chat_id,
                                 f'–®–ª—ë–ø–∞ —Å–ª–∞–≤–Ω–æ –∑–∞–º–µ—Å–∏–ª —Ü–µ–º–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É - {earned_money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤'
                                 '.üòºüí∞\n–°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Å.‚åõÔ∏è')
                config.last_work_time[user_id] = datetime.now()
                utils.work_result(call)

        else:
            bot.send_message(chat_id,
                             "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                             "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    if call.data == 'work_dumpling':
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        conn = sqlite3.connect('users-floppa.sql')
        cursor = conn.cursor()

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            cursor.execute('SELECT age, sleeping FROM users WHERE user_id = ?', (user_id,))
            needs_check = cursor.fetchone()

            if needs_check[1] == 1:
                bot.send_message(chat_id,
                                 '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                                 parse_mode='Markdown')
                return

            if needs_check[0] < 5:

                bot.send_message(chat_id, '*–í–∞—à –®–ª—ë–ø–∞ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ªüë∂*, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π. ',
                                 parse_mode='Markdown')
                return

            cursor.execute('SELECT coin, waste, hunger, boredom FROM users WHERE user_id = ?', (user_id,))
            current_values = cursor.fetchone()

            coin, waste, hunger, boredom = current_values

            if waste < 15 or hunger < 15 or boredom < 15:
                bot.send_message(chat_id, '*–®–ª—ë–ø–µ –Ω—É–∂–µ–Ω —É—Ö–æ–¥*, —Å–µ–π—á–∞—Å –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.üòæ\n\n/myfloppa',
                                 parse_mode='Markdown')
                return

            if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
                remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë '
                                          f'{minutes} –º–∏–Ω—É—Ç.*', parse_mode='Markdown')
            else:
                client = random.choice(nice_clients + strict_clients + not_strict_clients)
                current_client = client

                client_markup = types.InlineKeyboardMarkup()
                advice_button = types.InlineKeyboardButton(text='–î–∞—Ç—å —Å–æ–≤–µ—Ç üìã', callback_data='advice')
                discount_button = types.InlineKeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É üí∞', callback_data='discount')
                fast_cook_button = types.InlineKeyboardButton(text='–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ‚åõÔ∏è', callback_data='faster')
                quality_cook_button = types.InlineKeyboardButton(text='–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ‚úÖ',
                                                                 callback_data='quality')
                client_markup.add(advice_button)
                client_markup.add(discount_button)
                client_markup.add(fast_cook_button)
                client_markup.add(quality_cook_button)

                bot.send_message(chat_id, f'*–ö –Ω–∞–º –ø–æ–∂–∞–ª–æ–≤–∞–ª –∫–ª–∏–µ–Ω—Ç - {client}üë®üèª*. –ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –®–ª—ë–ø–∞?üòº',
                                 reply_markup=client_markup, parse_mode='Markdown')

        else:
            bot.send_message(chat_id,
                             "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                             "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    if call.data == 'advice':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        client = current_client

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if client in strict_clients:
            client_likes = random.random() < 0.25
            if client_likes:
                money = 40
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.üß¢*\n–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ, –Ω–æ '
                                          f'*–∫–ª–∏–µ–Ω—Ç—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.*\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

            else:
                money = 30
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n–ö–ª–∏–µ–Ω—Ç—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

        if client in not_strict_clients:
            client_likes = random.random() < 0.41
            if client_likes:
                money = 60
                bot.send_message(chat_id, f'{client} –∑–∞–ø–ª–∞—Ç–∏–ª(–∞), –Ω–µ –æ—Å—Ç–∞–≤–∏–≤ –æ—Ç–∑—ã–≤. üí¨\n*–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ'
                                          f'-–∫–æ–∏–Ω–æ–≤. üí∞*', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 45
                bot.send_message(chat_id, f'*{client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π. üëéüèø*\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-'
                                          f'–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

        if client in nice_clients:
            client_likes = random.random() < 0.75
            if client_likes:
                money = 90
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!üíö*\n–°–µ—Ä–≤–∏—Å –≤ —ç—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω–Ω—ã–π!'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 60
                bot.send_message(chat_id, f'–ö–ª–∏–µ–Ω—Ç—É {client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.üëéüèø\n*–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money}'
                                          f'—Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞*', parse_mode='Markdown')
                salary(call, money)

    if call.data == 'discount':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        client = current_client

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if client in strict_clients:
            client_likes = random.random() < 0.15
            if client_likes:
                money = 35
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n–ü–µ–ª—å–º–µ–Ω–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏ –ª—É—á—à–µ.‚òùÔ∏è'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 25
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å —É–∂–∞—Å–Ω—ã–π'
                                          f' –≤–∫—É—Å –±–ª—é–¥–∞.üò°üé©\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

        if client in not_strict_clients:
            client_likes = random.random() < 0.5
            if client_likes:
                money = 65
                bot.send_message(chat_id, f'*{client} –∑–∞–ø–ª–∞—Ç–∏–ª(–∞), –æ—Ç–º–µ—Ç–∏–≤ –æ—Ç–ª–∏—á–Ω—ã–µ —Ü–µ–Ω—ã.ü§î*\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money}'
                                          f'—Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 45
                bot.send_message(chat_id, f'*{client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n–ü–µ–ª—å–º–µ–Ω–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ –≤–∫—É—Å–Ω—ã–º–∏.ü§Æ'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

        if client in nice_clients:
            client_likes = random.random() < 0.83
            if client_likes:
                money = 90
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!*\n–¶–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ!üá®üá´'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 70
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n–û—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å. üò§'
                                          f'\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

    if call.data == 'faster':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        client = current_client

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if client in strict_clients:
            client_likes = random.random() < 0.13
            if client_likes:
                money = 60
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω–µ—Å–ª–∏ –±—ã—Å—Ç—Ä–æ, –Ω–æ '
                                          f'—Å–µ—Ä–≤–∏—Å, –µ–¥–∞ –∏ —Ü–µ–Ω—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –ø–ª–æ—Ö–∏–º–∏.üò§üé©\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} '
                                  '—Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 30
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n–ö—Ä–∏—Ç–∏–∫ –æ—Å—Ç–∞–≤–∏–ª'
                                          f'–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤.üé©\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

        if client in not_strict_clients:
            client_likes = random.random() < 0.5
            if client_likes:
                money = 90
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n{client}: –ö–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω–µ—Å–ª–∏ –Ω–∞—à'
                                          f' –∑–∞–∫–∞–∑!üíö\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 60
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n{client}: –¶–µ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '
                                          f'–∫–∞—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–∞!üòù\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

        if client in nice_clients:
            client_likes = random.random() < 0.3
            if client_likes:
                money = 50
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!*\n–ü–µ–ª—å–º–µ–Ω–∏ –ø–æ–ª—É—á–∏–ª–∏—Å—å –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–º–∏, –Ω–æ '
                                          f'–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–µ—Å–ª–∏ –±—ã—Å—Ç—Ä–æ!üôÇ\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)
            else:
                money = 40
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n–£–∂–∞—Å–Ω–æ –Ω–µ –≤–∫—É—Å–Ω—ã–µ '
                                          f'–ø–µ–ª—å–º–µ–Ω–∏!ü§¢\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

    if call.data == 'quality':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        client = current_client

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return
        config.last_work_time[user_id] = datetime.now()
        if client in strict_clients:
            client_likes = random.random() < 0.65

            if client_likes:
                money = 90
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n{client}: –ò—Å–∫—Ä–µ–Ω–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é '
                                          f'–∑–∞—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç—É –ø–µ–ª—å–º–µ–Ω–Ω—É—é.üëçüèøüé©\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

            else:
                money = 60
                bot.send_message(chat_id, f'*{client} –±—ã–ª/–±—ã–ª–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–∏–∫–æ–º.*\n{client}: –ó–¥–µ—Å—å –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ '
                                          f'–≤—Å—ë.ü§¨üé©\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

        if client in not_strict_clients:
            client_likes = random.random() < 0.5

            if client_likes:
                money = 60
                bot.send_message(chat_id, f'{client} –∑–∞–ø–ª–∞—Ç–∏–ª(–∞), –æ—Ç–º–µ—Ç–∏–≤, —á—Ç–æ –∑–¥–µ—Å—å –≥–æ—Ç–æ–≤—è—Ç –æ—Ç–ª–∏—á–Ω—ã–µ –ø–µ–ª—å–º–µ–Ω–∏.üíö'
                                          f'\n*–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞*', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 50
                bot.send_message(chat_id, f'*{client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n–ü—Ä–∏—à–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å '
                                          f'–∑–∞–∫–∞–∑. üòû\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

        if client in nice_clients:
            client_likes = random.random() < 0.2

            if client_likes:
                money = 40
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!*\n–í–∫—É—Å –æ—Ç–º–µ–Ω–Ω—ã–π, –Ω–æ –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å '
                                          f'–∑–∞–∫–∞–∑. üôÇ\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞', parse_mode='Markdown')
                salary(call, money)

            else:
                money = 30
                bot.send_message(chat_id, f'*–ö–ª–∏–µ–Ω—Ç—É {client} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–µ–ª—å–º–µ–Ω–Ω–æ–π.*\n–†–∞–∑–≤–µ –º–æ–∂–Ω–æ —Ç–∞–∫ –¥–æ–ª–≥–æ '
                                          f'–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ–ª—å–º–µ–Ω–∏?!ü§¨\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤. üí∞',
                                 parse_mode='Markdown')
                salary(call, money)

    if call.data == 'button_farm':
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        conn = sqlite3.connect('users-floppa.sql')
        cursor = conn.cursor()

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            cursor.execute('SELECT age, sleeping FROM users WHERE user_id = ?', (user_id,))
            needs_check = cursor.fetchone()

            if needs_check[1] == 1:
                bot.send_message(chat_id,
                                 '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                                 parse_mode='Markdown')
                return

            if needs_check[0] < 10:
                bot.send_message(chat_id, '*–í–∞—à –®–ª—ë–ø–∞ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ªüë∂*, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏. ',
                                 parse_mode='Markdown')
                return

            cursor.execute('SELECT coin, waste, hunger, boredom FROM users WHERE user_id = ?', (user_id,))
            current_values = cursor.fetchone()

            coin, waste, hunger, boredom = current_values

            if waste < 15 or hunger < 15 or boredom < 15:
                bot.send_message(chat_id, '*–®–ª—ë–ø–µ –Ω—É–∂–µ–Ω —É—Ö–æ–¥*, —Å–µ–π—á–∞—Å –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.üòæ\n\n/myfloppa',
                                 parse_mode='Markdown')
                return

            if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
                remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë '
                                          f'{minutes} –º–∏–Ω—É—Ç.*', parse_mode='Markdown')
            else:
                problem = random.choice(farm_problems)
                current_farm_problem = problem

                farm_markup = types.InlineKeyboardMarkup()
                sowing_button = types.InlineKeyboardButton(text='–ü–æ—Å–µ–≤ üéã', callback_data='sowing')
                watering_button = types.InlineKeyboardButton(text='–ü–æ–ª–∏–≤ üí¶', callback_data='watering')
                fungicides_button = types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å\n—Ñ—É–Ω–≥–∏—Ü–∏–¥—ã üå´', callback_data='fungicides')
                fertilizer_button = types.InlineKeyboardButton(text='–£–¥–æ–±—Ä–µ–Ω–∏–µ üí©', callback_data='fertilizer')
                collection_button = types.InlineKeyboardButton(text='–°–±–æ—Ä –º—è—Ç—ã üå±', callback_data='collection')
                remove_weed_button = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å —Å–æ—Ä–Ω—è–∫–∏ üçÅ', callback_data='weed')

                farm_markup.add(sowing_button, watering_button)
                farm_markup.add(collection_button, remove_weed_button)
                farm_markup.add(fungicides_button)
                farm_markup.add(fertilizer_button)

                bot.send_message(chat_id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–ª–∞–Ω—Ç–∞—Ü–∏—é, –≥–¥–µ –º—ã –≤—ã—Ä–∞—â–∏–≤–∞–µ–º –æ—Ç–±–æ—Ä–Ω—É—é –º—è—Ç—É!üçÉ\n\n'
                                          f'*–ü—Ä–æ–±–ª–µ–º–∞: {problem}‚ö†Ô∏èüåø*\n\n–ß—Ç–æ –®–ª—ë–ø–∞ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å?üòº',
                                 parse_mode='Markdown', reply_markup=farm_markup)

        else:
            bot.send_message(chat_id,
                             "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –®–ª—ë–ø—É.üòºüí∞\n*–í–≤–µ–¥–∏—Ç–µ "
                             "–∫–æ–º–∞–Ω–¥—É /buy.*", parse_mode='Markdown')

    if call.data == 'sowing':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if '–Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ' in problem:
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'*–ü–æ—Å–µ–≤ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ*, –®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É ({money} —Ñ–ª–æ–ø–ø–æ-'
                                      f'–∫–æ–∏–Ω–æ–≤)üí∞!', parse_mode='Markdown')
        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã‚ÄºÔ∏è\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É!* ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)üí∞', parse_mode='Markdown')

    if call.data == 'watering':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if problem == '–ó–∞—Å—É—Ö–∞':
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é *–∑–∞—Ä–ø–ª–∞—Ç—É ({money} —Ñ–ª–æ–ø–ø–æ-'
                                      f'–∫–æ–∏–Ω–æ–≤)üí∞!*', parse_mode='Markdown')
        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!‚ùå\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞! ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)*', parse_mode='Markdown')

    if call.data == 'fungicides':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if '–ø–ª–µ—Å–µ–Ω—å—é –∏ –≥—Ä–∏–±–∫–æ–º' in problem:
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'*–ö—É—Å—Ç—ã –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª–∏!* üåø –®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É ({money} —Ñ–ª–æ–ø–ø–æ-'
                                      f'–∫–æ–∏–Ω–æ–≤)üí∞!', parse_mode='Markdown')
        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!‚ùå\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞! ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)*', parse_mode='Markdown')

    if call.data == 'fertilizer':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if '–Ω–µ –º–æ–≥—É—Ç –≤—ã—Ä–∞—Å—Ç–∏' in problem:
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'–£—Ä–∞! *–ö—É—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–æ—Å—Ç–∏.* üéâ –®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É' 
                                      f'({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤) üí∞!', parse_mode='Markdown')

        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!‚ùå\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞! ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)*', parse_mode='Markdown')

    if call.data == 'weed':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if '–∑–∞—Ä–æ—Å–ª–∞ —Å–æ—Ä–Ω—è–∫–æ–º' in problem:
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! *–¢–µ–ø–µ—Ä—å —Ç—É—Ç —á–∏—Å—Ç–æ. üßπ*\n–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É ({money} '
                                      f'—Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤) üí∞!',
                             parse_mode='Markdown')

        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!‚ùå\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞! ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)*', parse_mode='Markdown')

    if call.data == 'collection':
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        problem = current_farm_problem

        if user_id in config.last_work_time and (datetime.now() - config.last_work_time[user_id]).seconds < 3600:
            remaining_time = timedelta(seconds=3600 - (datetime.now() - config.last_work_time[user_id]).seconds)
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(chat_id, f'–®–ª—ë–ø–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.üòæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (/myfloppa - —É–∑–Ω–∞—Ç—å '
                                      f'–≤—Ä–µ–º—è)*', parse_mode='Markdown')
            return

        config.last_work_time[user_id] = datetime.now()

        if '–æ–±–∏–ª—å–Ω—ã–µ –∫—É—Å—Ç—ã' in problem:
            money = 100
            salary(call, money)
            bot.send_message(chat_id, f'*–£—Ö—Ö, —Å–∫–æ–ª—å–∫–æ –º—è—Ç—ã —Å–æ–±—Ä–∞–Ω–æ!üå±* –®–ª—ë–ø–∞ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–æ–π–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É'
                                      f'({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤) üí∞!', parse_mode='Markdown')

        else:
            money = 30
            salary(call, money)
            bot.send_message(chat_id, f'–≠—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–æ–≥–ª–æ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã!‚ùå\n*–®–ª—ë–ø–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–µ–Ω—å '
                                      f'–º–∞–ª–µ–Ω—å–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞! ({money} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤)*', parse_mode='Markdown')
