import sqlite3
import time
import config
from config import bot
from datetime import datetime, timedelta
import random

from config import nice_clients, strict_clients, not_strict_clients, farm_problems

last_age_update = datetime.now().date()


def create_shop_db():
    conn = sqlite3.connect('shop-items.db')
    cursor = conn.cursor()

    cursor.execute('CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY, name TEXT, price INTEGER, effect TEXT)')
    conn.commit()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω
    items_to_insert = [
        ('–ó–µ–ª—å–µ "–°–æ—Ç–∫–∞"', 100, '{"hunger": 100,  "boredom": 100, "waste": 100}'),
        ("–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–µ—Å–µ–ª—å—è", 40, '{"boredom": 100}'),
        ('–ú–∏—Å–∫–∞ –ø–µ–ª—å–º–µ—à–µ–π', 40, '{"hunger": 100}'),
        ('–ú—ã–ª–æ "–ö–∏–º–±–æ"', 40, '{"waste": 100}'),
        ('–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç', 200, '{"coin_range": [50, 400]}'),
        ('–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞', 350, '{"coin":60}'),

    ]
    cursor.executemany('INSERT INTO items (name, price, effect) VALUES (?, ?, ?)', items_to_insert)

    conn.commit()

    conn.close()


def check_floppa_needs():
    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute(
        'SELECT user_id, floppa_name, hunger, waste, boredom FROM users WHERE hunger = 0 OR waste = 0 OR boredom = 0')
    users_to_notify = cursor.fetchall()

    for user_id, floppa_name, hunger, waste, boredom in users_to_notify:
        message = f"–í–∞—à–µ–º—É –®–ª—ë–ø–µ {floppa_name} —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π —É—Ö–æ–¥ –∏–ª–∏ –≤—ã –µ–≥–æ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ!üòø –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        if hunger == 0:
            message += f"–°—ã—Ç–æ—Å—Ç—åüòã: {hunger}%\n"
        if waste == 0:
            message += f"–ß–∏—Å—Ç–æ—Ç–∞üóë: {waste}%\n"
        if boredom == 0:
            message += f"–í–µ—Å—ë–ª—ã–πü•±: {boredom}%\n"

        bot.send_message(user_id, message)

    conn.close()


def update_floppas():
    global last_age_update

    while True:
        time.sleep(60)

        conn = sqlite3.connect('users-floppa.sql')
        cursor = conn.cursor()

        cursor.execute('SELECT user_id, wait_interval, sleeping FROM users')
        user_data = cursor.fetchall()

        for user_id, wait_interval, sleeping in user_data:
            if sleeping:
                time.sleep(wait_interval)  # –ñ–¥–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ (4 –º–∏–Ω—É—Ç—ã)

                cursor.execute(
                    'UPDATE users SET hunger = hunger - 1, waste = waste - 1, boredom = boredom - 1 WHERE user_id = ?',
                    (user_id,))
                conn.commit()

            else:
                check_floppa_needs()

                cursor.execute('UPDATE users SET hunger = hunger - 1, waste = waste - 1, boredom = boredom - 1 WHERE user_id = ?', (user_id,))
                conn.commit()

        today = datetime.now().date()
        if today > last_age_update:
            update_age()
            last_age_update = today

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        cursor.execute('SELECT user_id, floppa_name FROM users WHERE hunger <= 0 AND waste <= 0 AND boredom <= 0')
        users_to_notify = cursor.fetchall()

        for user_id, floppa_name in users_to_notify:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É–¥–∞–ª–µ–Ω–∏–∏ –®–ª—ë–ø—ã
            bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, *–≤–∞—à –®–ª—ë–ø–∞ {floppa_name} —É–±–µ–∂–∞–ª* –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –∑–∞ –Ω–∏–º –Ω–µ "
                                      f"—Å–ª–µ–¥–∏–ª–∏.üôÄ\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –®–ª—ë–ø—É —Å –ø–æ–º–æ—â—å—é *–∫–æ–º–∞–Ω–¥—ã /buy.* "
                                      f"–í–ø—Ä–µ–¥—å –±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–µ–µ.üòæ", parse_mode='Markdown')

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 40 –º–∏–Ω—É—Ç
        now = datetime.now()
        for user_id in list(config.last_feed_times.keys()):
            if now - config.last_feed_times[user_id] > timedelta(minutes=40):
                del config.last_feed_times[user_id]

        conn.close()


def update_age():
    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET age = age + 1')
    conn.commit()

    conn.close()


def work_result_dumplings(message, coin_increase):
    user_id = message.from_user.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT coin, hunger, waste, boredom FROM users WHERE user_id = ?', (user_id,))
    current_values = cursor.fetchone()

    coin, hunger, waste, boredom = current_values

    cursor.execute('SELECT item_name FROM inventory WHERE user_id = ? AND item_name = ?', (user_id, '–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞'))
    has_concrete_mixer = cursor.fetchone()

    hunger = max(hunger - 5, 0)
    waste = max(waste - 15, 0)
    boredom = max(boredom - 15, 0)
    coin += coin_increase

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    cursor.execute('UPDATE users SET coin = ?, hunger = ?, waste = ?, boredom = ? WHERE user_id = ?',
                   (coin, hunger, waste, boredom, user_id))
    conn.commit()

    conn.close()


def work_result(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT coin, hunger, waste, boredom FROM users WHERE user_id = ?', (user_id,))
    current_values = cursor.fetchone()

    coin, hunger, waste, boredom = current_values

    cursor.execute('SELECT item_name FROM inventory WHERE user_id = ? AND item_name = ?', (user_id, '–ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞'))
    has_concrete_mixer = cursor.fetchone()

    # –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ 10 (–∏–ª–∏ 20 –¥–ª—è boredom), –Ω–æ –Ω–µ –Ω–∏–∂–µ 0
    hunger = max(hunger - 10, 0)
    waste = max(waste - 10, 0)
    boredom = max(boredom - 20, 0)

    if has_concrete_mixer:
        coin += 60
    else:
        coin += 30

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    cursor.execute('UPDATE users SET coin = ?, hunger = ?, waste = ?, boredom = ? WHERE user_id = ?',
                   (coin, hunger, waste, boredom, user_id))
    conn.commit()

    conn.close()


def check_sleeping(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    conn = sqlite3.connect('users-floppa.sql')
    cursor = conn.cursor()

    cursor.execute('SELECT sleeping FROM users WHERE user_id = ?', (user_id,))
    sleep_check = cursor.fetchone()

    if sleep_check[0] == 1:
        bot.send_message(chat_id,
                         '–í–∞—à –®–ª—ë–ø–∞ —Å–ø–∏—Ç!üò¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n*/unsleep - —Ä–∞–∑–±—É–¥–∏—Ç—å –®–ª—ë–ø—É*',
                         parse_mode='Markdown')

    conn.close()


def win_change_boredom(message):
    user_id = message.from_user.id

    conn_users = sqlite3.connect('users-floppa.sql')
    cursor_users = conn_users.cursor()

    cursor_users.execute('SELECT boredom FROM users WHERE user_id = ?', (user_id,))
    current_values = cursor_users.fetchone()

    # –ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
    boredom = current_values[0]

    boredom = min(boredom + 1, 100)

    cursor_users.execute('UPDATE users SET boredom = ? WHERE user_id = ?',
                   (boredom, user_id))
    conn_users.commit()

    conn_users.close()


def loss_change_boredom(message):
    user_id = message.from_user.id

    conn_users = sqlite3.connect('users-floppa.sql')
    cursor_users = conn_users.cursor()

    cursor_users.execute('SELECT boredom FROM users WHERE user_id = ?', (user_id,))
    current_values = cursor_users.fetchone()

    # –ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
    boredom = current_values[0]

    boredom = max(boredom - 2, 0)

    cursor_users.execute('UPDATE users SET boredom = ? WHERE user_id = ?',
                   (boredom, user_id))
    conn_users.commit()

    conn_users.close()


def _1_34(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_34 = message.text

    try:
        chips_to_34 = int(chips_to_34)
        if chips_to_34 < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_34:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config._2_to_1_34:
                chips_win = chips_to_34 * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_34
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def _2_35(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_35 = message.text

    try:
        chips_to_35 = int(chips_to_35)
        if chips_to_35 < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_35:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config._2_to_1_35:
                chips_win = chips_to_35 * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_35
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def _3_36(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_36 = message.text

    try:
        chips_to_36 = int(chips_to_36)
        if chips_to_36 < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_36:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config._2_to_1_36:
                chips_win = chips_to_36 * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_36
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def _1_18(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_18 = message.text

    try:
        chips_to_18 = int(chips_to_18)
        if chips_to_18 < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_18:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config._1_to_18:
                chips_win = chips_to_18 * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_18
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def _19_36(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_19 = message.text

    try:
        chips_to_19 = int(chips_to_19)
        if chips_to_19 < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_19:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config._19_to_36:
                chips_win = chips_to_19 * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_19
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def st_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_st = message.text

    try:
        chips_to_st = int(chips_to_st)
        if chips_to_st < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_st:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config.st_12:
                chips_win = chips_to_st * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_st
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def nd_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_nd = message.text

    try:
        chips_to_nd = int(chips_to_nd)
        if chips_to_nd < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_nd:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config.nd_12:
                chips_win = chips_to_nd * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_nd
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def rd_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_rd = message.text

    try:
        chips_to_rd = int(chips_to_rd)
        if chips_to_rd < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_rd:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config.rd_12:
                chips_win = chips_to_rd * 3
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_rd
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:

            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def odd_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_odd = message.text

    try:
        chips_to_odd = int(chips_to_odd)
        if chips_to_odd < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_odd:

            random_casino_number = random.randint(0, 36)

            if random_casino_number % 2 != 0:
                chips_win = chips_to_odd * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_odd
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:

            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def even_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_even = message.text

    try:
        chips_to_even = int(chips_to_even)
        if chips_to_even < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_even:

            random_casino_number = random.randint(0, 36)

            if random_casino_number % 2 == 0:
                chips_win = chips_to_even * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_even
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def zero_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_zero = message.text

    try:
        chips_to_zero = int(chips_to_zero)
        if chips_to_zero < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_zero:

            random_casino_number = random.randint(0, 36)

            if random_casino_number == 0:
                chips_win = chips_to_zero * 36
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_zero
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def black_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_black = message.text

    try:
        chips_to_black = int(chips_to_black)
        if chips_to_black < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_black:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config.black_numbers:
                chips_win = chips_to_black * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance,new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_black
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips,new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def red_casino(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_red = message.text

    try:
        chips_to_red = int(chips_to_red)
        if chips_to_red < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.* üòæ', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    cursor.execute('SELECT chips, wins, losses FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]
        current_wins = casino_data[1]
        current_losses = casino_data[2]

        if current_chips >= chips_to_red:

            random_casino_number = random.randint(0, 36)

            if random_casino_number in config.red_numbers:
                chips_win = chips_to_red * 2
                new_chips_balance = current_chips + chips_win
                new_balance_wins = current_wins + 1
                cursor.execute('UPDATE casino SET chips=?, wins=? WHERE user_id=?',
                               (new_chips_balance, new_balance_wins, user_id))
                conn.commit()

                win_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {chips_win}'
                                          f' —Ñ–∏—à–µ–∫.üé∞*', parse_mode='Markdown')
            else:

                current_chips -= chips_to_red
                new_balance_loss = current_losses + 1
                cursor.execute('UPDATE casino SET chips=?, losses=? WHERE user_id=?',
                               (current_chips, new_balance_loss, user_id))
                conn.commit()

                loss_change_boredom(message)

                bot.send_message(chat_id, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_casino_number}üî¢\n*–£–≤—ã, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –≤–µ–∑—ë—Ç.üòø*',
                                 parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∏—à–µ–∫.üí∞\n*–í–≤–µ–¥–∏—Ç–µ /caz*, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏—Ö. üßê',
                         parse_mode='Markdown')

    conn.close()


def short_callback_sell_chips(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chips_to_sell = message.text

    try:
        chips_to_sell = int(chips_to_sell)
        if chips_to_sell < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.üòæ*', parse_mode='Markdown')
        return

    conn = sqlite3.connect('casino.sql')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    cursor = conn.cursor()

    conn_1 = sqlite3.connect('users-floppa.sql')
    cursor_1 = conn_1.cursor()

    cursor.execute('SELECT chips FROM casino WHERE user_id=?', (user_id,))
    casino_data = cursor.fetchone()

    if casino_data is not None:
        current_chips = casino_data[0]

        if current_chips >= chips_to_sell:
            chips_price = 1  # –°–∫–æ–ª—å–∫–æ —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É —Ñ–∏—à–∫—É
            exchanged_coins = chips_to_sell  # –ü—Ä–æ—Å—Ç–æ –æ–±–º–µ–Ω—è—Ç—å —Ñ–∏—à–∫–∏ –Ω–∞ –∫–æ–∏–Ω—ã
            remaining_chips = current_chips - chips_to_sell

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ñ–∏—à–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
            cursor.execute('UPDATE casino SET chips=? WHERE user_id=?', (remaining_chips, user_id))
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–æ–ø–ø–∞
            cursor_1.execute('SELECT coin FROM users WHERE user_id=?', (user_id,))
            user_data = cursor_1.fetchone()
            current_coins = user_data[0] if user_data is not None else 0
            new_coins_balance = current_coins + exchanged_coins
            cursor_1.execute('UPDATE users SET coin=? WHERE user_id=?', (new_coins_balance, user_id))
            conn_1.commit()

            bot.send_message(chat_id, f'*–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {chips_to_sell} —Ñ–∏—à–µ–∫ üí∞ –Ω–∞ {exchanged_coins} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ üí≤*',
                             parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ üí∞* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å *–Ω–µ—Ç —Ñ–∏—à–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏üí∞*', parse_mode='Markdown')

    conn.close()
    conn_1.close()


def short_callback_buy_chips(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    coins_to_exchange = message.text

    try:
        coins_to_exchange = int(coins_to_exchange)
        if coins_to_exchange < 1:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!*üòæ', parse_mode='Markdown')
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    conn_casino = sqlite3.connect('casino.sql')
    cursor_casino = conn_casino.cursor()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn_users = sqlite3.connect('users-floppa.sql')
    cursor_users = conn_users.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º –±–∞–ª–∞–Ω—Å —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ (coins) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor_users.execute('SELECT coin FROM users WHERE user_id=?', (user_id,))
    user_data = cursor_users.fetchone()

    if user_data is not None:

        current_coins = user_data[0]

        if current_coins >= coins_to_exchange:
            chips_price = 1  # –°–∫–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –æ–¥–Ω–æ–π —Ñ–∏—à–∫–∏
            exchanged_chips = coins_to_exchange  # –ü—Ä–æ—Å—Ç–æ –æ–±–º–µ–Ω—è—Ç—å –∫–æ–∏–Ω—ã –Ω–∞ —Ñ–∏—à–∫–∏
            remaining_coins = current_coins - coins_to_exchange

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor_users.execute('UPDATE users SET coin=? WHERE user_id=?', (remaining_coins, user_id))
            conn_users.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ñ–∏—à–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
            cursor_casino.execute('SELECT chips FROM casino WHERE user_id=?', (user_id,))
            casino_data = cursor_casino.fetchone()
            current_chips = casino_data[0] if casino_data is not None else 0
            new_chips_balance = current_chips + exchanged_chips
            cursor_casino.execute('UPDATE casino SET chips=? WHERE user_id=?', (new_chips_balance, user_id))
            conn_casino.commit()

            bot.send_message(chat_id,
                             f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ *{coins_to_exchange} —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤ üí≤ –Ω–∞ {exchanged_chips} —Ñ–∏—à–µ–∫ üí∞*',
                             parse_mode='Markdown')

        else:
            bot.send_message(chat_id, '–£ –≤–∞—Å *–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–ª–æ–ø–ø–æ-–∫–æ–∏–Ω–æ–≤* –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. üßê', parse_mode='Markdown')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –≤–∞–º –Ω–µ –¥–æ–≤–µ—Ä—è–µ–º!üßê *(–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!)*', parse_mode='Markdown')

    conn_casino.close()
    conn_users.close()

